AWSTemplateFormatVersion: '2010-09-09'
Description: 'CarbonLens AWS Infrastructure - AR-Powered Sustainable Shopping Assistant'

Parameters:
  ProjectName:
    Type: String
    Default: 'carbonlens'
    Description: 'Name of the project for resource naming'
  
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'
  
  DomainName:
    Type: String
    Default: ''
    Description: 'Custom domain name (optional)'

Resources:
  # S3 Buckets
  ProductImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-product-images'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            ExpirationInDays: 90
      VersioningConfiguration:
        Status: Enabled

  UserDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-user-data'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            ExpirationInDays: 365

  # DynamoDB Tables
  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-products'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: barcode
          AttributeType: S
        - AttributeName: category
          AttributeType: S
        - AttributeName: sustainabilityScore
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: BarcodeIndex
          KeySchema:
            - AttributeName: barcode
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: CategoryIndex
          KeySchema:
            - AttributeName: category
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: SustainabilityIndex
          KeySchema:
            - AttributeName: sustainabilityScore
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  UserScansTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-user-scans'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: scanId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: scanId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: TimestampIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  EnvironmentalDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-environmental-data'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: productId
          AttributeType: S
        - AttributeName: dataType
          AttributeType: S
      KeySchema:
        - AttributeName: productId
          KeyType: HASH
        - AttributeName: dataType
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # IAM Roles
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: CustomLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub '${ProductImagesBucket}/*'
                  - !Sub '${UserDataBucket}/*'
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt ProductsTable.Arn
                  - !Sub '${ProductsTable.Arn}/index/*'
                  - !GetAtt UserScansTable.Arn
                  - !Sub '${UserScansTable.Arn}/index/*'
                  - !GetAtt EnvironmentalDataTable.Arn

  # Lambda Functions
  ProductDetectionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-product-detection'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 1024
      Environment:
        Variables:
          PRODUCTS_TABLE: !Ref ProductsTable
          ENVIRONMENTAL_DATA_TABLE: !Ref EnvironmentalDataTable
          PRODUCT_IMAGES_BUCKET: !Ref ProductImagesBucket
          USER_DATA_BUCKET: !Ref UserDataBucket
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const rekognition = new AWS.Rekognition();
          const dynamodb = new AWS.DynamoDB.DocumentClient();
          const s3 = new AWS.S3();
          
          exports.handler = async (event) => {
            try {
              const { imageData, userId } = JSON.parse(event.body);
              
              // Use Amazon Rekognition for product detection
              const rekognitionParams = {
                Image: { Bytes: Buffer.from(imageData, 'base64') },
                MaxLabels: 10,
                MinConfidence: 70
              };
              
              const rekognitionResult = await rekognition.detectLabels(rekognitionParams).promise();
              
              // Process detected labels and match to products
              const detectedProducts = await matchProductsToLabels(rekognitionResult.Labels);
              
              // Save scan to user history
              if (userId) {
                await saveUserScan(userId, detectedProducts);
              }
              
              return {
                statusCode: 200,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  success: true,
                  products: detectedProducts
                })
              };
            } catch (error) {
              return {
                statusCode: 500,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  success: false,
                  error: error.message
                })
              };
            }
          };
          
          async function matchProductsToLabels(labels) {
            // Implementation for matching Rekognition labels to products
            return [];
          }
          
          async function saveUserScan(userId, products) {
            // Implementation for saving user scan data
          }

  EnvironmentalAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-environmental-analysis'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 2048
      Environment:
        Variables:
          ENVIRONMENTAL_DATA_TABLE: !Ref EnvironmentalDataTable
          PRODUCTS_TABLE: !Ref ProductsTable
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const bedrock = new AWS.BedrockRuntime();
          const dynamodb = new AWS.DynamoDB.DocumentClient();
          
          exports.handler = async (event) => {
            try {
              const { productId, productData } = JSON.parse(event.body);
              
              // Use Amazon Bedrock for AI-powered environmental analysis
              const analysisPrompt = buildAnalysisPrompt(productData);
              
              const bedrockParams = {
                modelId: 'anthropic.claude-3-sonnet-20240229-v1:0',
                body: JSON.stringify({
                  prompt: analysisPrompt,
                  max_tokens_to_sample: 2000,
                  temperature: 0.3
                })
              };
              
              const bedrockResult = await bedrock.invokeModel(bedrockParams).promise();
              const analysis = JSON.parse(bedrockResult.body.toString());
              
              // Save analysis to DynamoDB
              await saveEnvironmentalAnalysis(productId, analysis);
              
              return {
                statusCode: 200,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  success: true,
                  analysis: analysis
                })
              };
            } catch (error) {
              return {
                statusCode: 500,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  success: false,
                  error: error.message
                })
              };
            }
          };
          
          function buildAnalysisPrompt(productData) {
            return `Analyze the carbon footprint of this product and provide specific alternative product recommendations with carbon savings. Return ONLY valid JSON:

Product: ${productData.name || 'Unknown'} by ${productData.brand || 'Unknown'}
Category: ${productData.category || 'Unknown'}
Ingredients: ${productData.ingredients || 'Not specified'}

IMPORTANT: For recommendations, provide 3 MAINSTREAM and POPULAR alternative products that users will recognize. Use well-known brands available in major stores (Walmart, Target, grocery stores). Calculate actual carbon savings compared to this product.

CRITICAL: Use REALISTIC VALUES based on actual product categories. DO NOT HALLUCINATE or use unrealistic numbers.

STRICT REALISTIC RANGES BY PRODUCT TYPE:
- BEVERAGES (soda, juice): carbonFootprint 0.1-0.5 kg CO₂, waterUsage 1-10 liters, waterInGallons 0.3-3 gallons (MAX 3 GALLONS)
- FOOD SPREADS (Nutella, peanut butter): carbonFootprint 1-5 kg CO₂, waterUsage 50-500 liters, waterInGallons 13-132 gallons
- SNACKS (chips, cookies): carbonFootprint 0.5-3 kg CO₂, waterUsage 10-100 liters, waterInGallons 3-26 gallons
- DAIRY PRODUCTS: carbonFootprint 1-8 kg CO₂, waterUsage 100-1000 liters, waterInGallons 26-264 gallons

MANDATORY CONSTRAINTS:
- For BEVERAGES: waterInGallons MUST be between 0.3-3 gallons (convert liters × 0.264)
- For BEVERAGES: treesAbsorbed MUST be between 0.005-0.025 trees
- For BEVERAGES: milesDriven MUST be between 0.25-1.25 miles
- NEVER exceed these ranges or the analysis will be rejected

For environmentalEquivalents, use EXACT CALCULATIONS:
- treesPer1000Units = treesAbsorbed × 1000 (simple multiplication)
- waterInGallons = waterUsage × 0.264172 (liters to gallons conversion)
- milesDriven = carbonFootprint × 2.5 (realistic conversion)
- treesAbsorbed = carbonFootprint × 0.05 (realistic tree absorption rate)

Return this exact JSON structure with REALISTIC estimates within the ranges above:
{
  "carbonFootprint": {
    "perUnit": 0.0,
    "per1000Units": 0.0,
    "breakdown": {
      "production": 0.0,
      "transportation": 0.0,
      "packaging": 0.0,
      "distribution": 0.0
    }
  },
  "waterUsage": {
    "perUnit": 0,
    "per1000Units": 0
  },
  "environmentalEquivalents": {
    "treesAbsorbed": 0,
    "treesPer1000Units": 0,
    "milesDriven": 0,
    "waterInGallons": 0,
    "plasticBottlesEquivalent": 0
  },
  "sustainabilityScore": 0,
  "recommendations": [
    "Brand Name Product - saves X kg carbon per 1000 units",
    "Brand Name Product - saves X kg carbon per 1000 units",
    "Brand Name Product - saves X kg carbon per 1000 units"
  ],
  "analysis": {
    "keyFindings": "Brief summary",
    "strengths": "Positive aspects",
    "concerns": "Environmental concerns"
  }
}`;
          }
          
          async function saveEnvironmentalAnalysis(productId, analysis) {
            // Implementation for saving analysis to DynamoDB
          }

  UserAnalyticsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-user-analytics'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          USER_SCANS_TABLE: !Ref UserScansTable
          ENVIRONMENTAL_DATA_TABLE: !Ref EnvironmentalDataTable
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();
          
          exports.handler = async (event) => {
            try {
              const { userId, timeframe = 'month' } = JSON.parse(event.body);
              
              // Calculate user's environmental impact analytics
              const analytics = await calculateUserAnalytics(userId, timeframe);
              
              return {
                statusCode: 200,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  success: true,
                  analytics: analytics
                })
              };
            } catch (error) {
              return {
                statusCode: 500,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  success: false,
                  error: error.message
                })
              };
            }
          };
          
          async function calculateUserAnalytics(userId, timeframe) {
            // Implementation for calculating user analytics
            return {};
          }

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-api'
      Description: 'CarbonLens API Gateway'
      EndpointConfiguration:
        Types:
          - REGIONAL

  ProductDetectionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'detect-product'

  ProductDetectionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ProductDetectionResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProductDetectionFunction.Arn}/invocations'

  EnvironmentalAnalysisResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'analyze-environmental'

  EnvironmentalAnalysisMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref EnvironmentalAnalysisResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EnvironmentalAnalysisFunction.Arn}/invocations'

  UserAnalyticsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'user-analytics'

  UserAnalyticsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UserAnalyticsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserAnalyticsFunction.Arn}/invocations'

  # Lambda Permissions
  ProductDetectionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProductDetectionFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  EnvironmentalAnalysisPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EnvironmentalAnalysisFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  UserAnalyticsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UserAnalyticsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ProductDetectionMethod
      - EnvironmentalAnalysisMethod
      - UserAnalyticsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-api-url'

  ProductImagesBucketName:
    Description: 'S3 Bucket for product images'
    Value: !Ref ProductImagesBucket
    Export:
      Name: !Sub '${ProjectName}-${Environment}-product-images-bucket'

  UserDataBucketName:
    Description: 'S3 Bucket for user data'
    Value: !Ref UserDataBucket
    Export:
      Name: !Sub '${ProjectName}-${Environment}-user-data-bucket'

  ProductsTableName:
    Description: 'DynamoDB table for products'
    Value: !Ref ProductsTable
    Export:
      Name: !Sub '${ProjectName}-${Environment}-products-table'

  UserScansTableName:
    Description: 'DynamoDB table for user scans'
    Value: !Ref UserScansTable
    Export:
      Name: !Sub '${ProjectName}-${Environment}-user-scans-table'

  EnvironmentalDataTableName:
    Description: 'DynamoDB table for environmental data'
    Value: !Ref EnvironmentalDataTable
    Export:
      Name: !Sub '${ProjectName}-${Environment}-environmental-data-table'
